; << Generated by NadLabem >>
; the open source brandejs-to-assembly compiler

cpu 8086
segment code
..start mov  bx, heap
        mov  ds, bx
        mov  es, bx
        mov  bx, stack
        mov  ss, bx
        mov  sp, dno
        mov  bp, sp

        jmp  over
putchar:
        push bp                  ;def putchar(character: char) -> void { (examples/../std/stdio.brandejs:1)
        mov  bp, sp
        sub  sp, 0
        mov ah, 2                ;    $ mov ah, 2     ; Identifikace služby Vypsat jeden bajt na terminál (examples/../std/stdio.brandejs:2)

        mov dl, byte[bp + 4]     ;    $ mov dl, byte[{character}]     ; Bajt, který se má na terminál vypsat (examples/../std/stdio.brandejs:3)

        int 0x21                 ;    $ int 0x21      ; resp. int 33 poskytne službu (examples/../std/stdio.brandejs:4)

rtn     mov  sp, bp
        pop  bp
        ret  2
over    nop

        jmp  over1
print:
        push bp                  ;def print(string: @char[]) -> void { (examples/../std/stdio.brandejs:17)
        mov  bp, sp
        sub  sp, 3
        mov  ax, 0               ;    i: int = 0 (examples/../std/stdio.brandejs:18)
        mov  word[bp - 2], ax

        mov  ax, 0               ;    byte: char = string[0] (examples/../std/stdio.brandejs:19)
        mov  si, ax
        mov  bx, word[bp + 4]
        mov  ax, 0
        mov  al, byte[bx + si]
        mov  byte[bp - 3], al

while   nop                      ;    while(byte != 0c){ (examples/../std/stdio.brandejs:20)
        mov  ax, 0
        push ax
        mov  ax, 0
        mov  al, byte[bp - 3]
        pop  bx
        cmp  ax, bx
        pushf
        pop  ax
        mov  cl, 6
        shr  ax, cl
        and  ax, 1
        xor  ax, 1
        jz   wout
        mov  ax, 0               ;        putchar(byte) (examples/../std/stdio.brandejs:21)
        mov  al, byte[bp - 3]
        push ax
        call putchar

        mov  ax, 1               ;        i = i + 1 (examples/../std/stdio.brandejs:22)
        push ax
        mov  ax, word[bp - 2]
        pop  bx
        add  ax, bx
        mov  word[bp - 2], ax

        mov  ax, word[bp - 2]    ;        byte = string[i] (examples/../std/stdio.brandejs:23)
        mov  si, ax
        mov  bx, word[bp + 4]
        mov  ax, 0
        mov  al, byte[bx + si]
        mov  byte[bp - 3], al

        jmp  while
wout    nop

rtn1    mov  sp, bp
        pop  bp
        ret  2
over1   nop

        jmp  over2
println:
        push bp                  ;def println(string: @char[]) -> void { (examples/../std/stdio.brandejs:33)
        mov  bp, sp
        sub  sp, 0
        mov  ax, word[bp + 4]    ;    print(*string) (examples/../std/stdio.brandejs:34)
        push ax
        call print

        mov  ax, 10              ;    putchar(10c)   ; 13 - CL (examples/../std/stdio.brandejs:35)
        push ax
        call putchar

        mov  ax, 13              ;    putchar(13c)   ; 10 - RF (examples/../std/stdio.brandejs:36)
        push ax
        call putchar

rtn2    mov  sp, bp
        pop  bp
        ret  2
over2   nop

        jmp  over3
assert:
        push bp                  ;def assert(condition: bool, message: @char[]) -> void { (examples/../std/stdlib.brandejs:3)
        mov  bp, sp
        sub  sp, 0
        mov  ax, 0               ;    if (not condition) error(*message) (examples/../std/stdlib.brandejs:4)
        mov  al, byte[bp + 4]
        xor  ax, 1
        jz   ifout
        mov  ax, word[bp + 6]
        push ax
        call error1

ifout   nop

rtn3    mov  sp, bp
        pop  bp
        ret  4
over3   nop

        jmp  over4
error1:
        push bp                  ;def error(message: @char[]) -> void { (examples/../std/stdlib.brandejs:7)
        mov  bp, sp
        sub  sp, 0
        lea  ax, [_str]          ;    println(*"Error occured:") (examples/../std/stdlib.brandejs:8)
        push ax
        call println

        mov  ax, word[bp + 4]    ;    println(*message) (examples/../std/stdlib.brandejs:9)
        push ax
        call println

        jmp error                ;    $ jmp error (examples/../std/stdlib.brandejs:10)

rtn4    mov  sp, bp
        pop  bp
        ret  2
over4   nop

        call main                ;main() (examples/eq_test.brandejs:13)
exit:
ok      hlt
error   hlt

        jmp  over5
main:
        push bp                  ;def main() -> void { (examples/eq_test.brandejs:3)
        mov  bp, sp
        sub  sp, 0
        lea  ax, [FAIL_MSG]      ;    assert(0 < 10, *FAIL_MSG) (examples/eq_test.brandejs:4)
        push ax
        mov  ax, 10
        push ax
        mov  ax, 0
        pop  bx
        cmp  ax, bx
        pushf
        pop  ax
        mov  cl, 7
        shr  al, cl
        and  al, 1
        mov  ah, 0
        push ax
        call assert

        lea  ax, [FAIL_MSG]      ;    assert(not (5 < 1), *FAIL_MSG) (examples/eq_test.brandejs:5)
        push ax
        mov  ax, 1
        push ax
        mov  ax, 5
        pop  bx
        cmp  ax, bx
        pushf
        pop  ax
        mov  cl, 7
        shr  al, cl
        and  al, 1
        mov  ah, 0
        xor  ax, 1
        push ax
        call assert

        lea  ax, [FAIL_MSG]      ;    assert(not (10 < 10), *FAIL_MSG) (examples/eq_test.brandejs:6)
        push ax
        mov  ax, 10
        push ax
        mov  ax, 10
        pop  bx
        cmp  ax, bx
        pushf
        pop  ax
        mov  cl, 7
        shr  al, cl
        and  al, 1
        mov  ah, 0
        xor  ax, 1
        push ax
        call assert

        lea  ax, [_str1]         ;    println(*"lower_than_test_success") (examples/eq_test.brandejs:8)
        push ax
        call println

rtn5    mov  sp, bp
        pop  bp
        ret  0
over5   nop

segment heap
stack   resw 1024
dno     db   ?

_str    db   "Error occured:", 0
_str1   db   "lower_than_test_success", 0
FAIL_MSG:
        db   "lower_than_test_fail", 0