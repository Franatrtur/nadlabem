; << Generated by NadLabem >>
; the open source brandejs-to-assembly compiler

cpu 8086
segment code
..start mov  bx, heap
        mov  ds, bx
        mov  es, bx
        mov  bx, stack
        mov  ss, bx
        mov  sp, dno
        mov  bp, sp

        call main                ;main() (examples/tests/unsigned_cmp_test.brandejs:4)
exit:
ok      hlt
error   hlt

        jmp  over
putchar:
        push bp                  ;def putchar(character: char) -> void { (examples/tests/../../std/stdio.brandejs:1)
        mov  bp, sp
        sub  sp, 0
        mov ah, 2                ;    $ mov ah, 2     ; Identifikace služby Vypsat jeden bajt na terminál (examples/tests/../../std/stdio.brandejs:2)

        mov dl, byte[bp + 4]     ;    $ mov dl, byte[{character}]     ; Bajt, který se má na terminál vypsat (examples/tests/../../std/stdio.brandejs:3)

        int 0x21                 ;    $ int 0x21      ; resp. int 33 poskytne službu (examples/tests/../../std/stdio.brandejs:4)

rtn     mov  sp, bp
        pop  bp
        ret  2
over    nop

        jmp  over1
print:
        push bp                  ;def print(str: @char[]) -> void { (examples/tests/../../std/stdio.brandejs:17)
        mov  bp, sp
        sub  sp, 3
        mov  ax, 0               ;    i: int = 0 (examples/tests/../../std/stdio.brandejs:18)
        mov  word[bp - 2], ax

        mov  ax, 0               ;    character: char = str[0] (examples/tests/../../std/stdio.brandejs:19)
        mov  si, ax
        mov  bx, word[bp + 4]
        mov  ax, 0
        mov  al, byte[bx + si]
        mov  byte[bp - 3], al

while   nop                      ;    while(character != 0c){ (examples/tests/../../std/stdio.brandejs:20)
        mov  ax, 0
        push ax
        mov  ax, 0
        mov  al, byte[bp - 3]
        pop  bx
        cmp  ax, bx
        pushf
        pop  ax
        mov  cl, 6
        shr  ax, cl
        and  ax, 1
        xor  ax, 1
        jz   wout
        mov  ax, 0               ;        putchar(character) (examples/tests/../../std/stdio.brandejs:21)
        mov  al, byte[bp - 3]
        push ax
        call putchar

        mov  ax, 1               ;        i = i + 1 (examples/tests/../../std/stdio.brandejs:22)
        push ax
        mov  ax, word[bp - 2]
        pop  bx
        add  ax, bx
        mov  word[bp - 2], ax

        mov  ax, word[bp - 2]    ;        character = str[i] (examples/tests/../../std/stdio.brandejs:23)
        mov  si, ax
        mov  bx, word[bp + 4]
        mov  ax, 0
        mov  al, byte[bx + si]
        mov  byte[bp - 3], al

        jmp  while
wout    nop

rtn1    mov  sp, bp
        pop  bp
        ret  2
over1   nop

        jmp  over2
println:
        push bp                  ;def println(str: @char[]) -> void { (examples/tests/../../std/stdio.brandejs:33)
        mov  bp, sp
        sub  sp, 0
        mov  ax, word[bp + 4]    ;    print(*str) (examples/tests/../../std/stdio.brandejs:34)
        push ax
        call print

        mov  ax, 10              ;    putchar(10c)   ; 13 - CL (examples/tests/../../std/stdio.brandejs:35)
        push ax
        call putchar

        mov  ax, 13              ;    putchar(13c)   ; 10 - RF (examples/tests/../../std/stdio.brandejs:36)
        push ax
        call putchar

rtn2    mov  sp, bp
        pop  bp
        ret  2
over2   nop

        jmp  over3
assert:
        push bp                  ;    def assert(condition: bool, message: @char[]) -> void { (examples/tests/../../std/stdlib.brandejs:5)
        mov  bp, sp
        sub  sp, 0
        mov  ax, 0               ;        if (not condition) error(*message) (examples/tests/../../std/stdlib.brandejs:6)
        mov  al, byte[bp + 4]
        xor  ax, 1
        jz   ifout
        mov  ax, word[bp + 6]
        push ax
        call error1

ifout   nop

rtn3    mov  sp, bp
        pop  bp
        ret  4
over3   nop

        jmp  over4
error1:
        push bp                  ;    def error(message: @char[]) -> void { (examples/tests/../../std/stdlib.brandejs:9)
        mov  bp, sp
        sub  sp, 0
        lea  ax, [_str]          ;        println(*"Error occured:") (examples/tests/../../std/stdlib.brandejs:10)
        push ax
        call println

        mov  ax, word[bp + 4]    ;        println(*message) (examples/tests/../../std/stdlib.brandejs:11)
        push ax
        call println

        jmp error                ;        $ jmp error (examples/tests/../../std/stdlib.brandejs:12)

rtn4    mov  sp, bp
        pop  bp
        ret  2
over4   nop

        jmp  over5
unsigned_lt_test:
        push bp                  ;def unsigned_lt_test() -> void { (examples/tests/unsigned_cmp_test.brandejs:7)
        mov  bp, sp
        sub  sp, 0
        lea  ax, [_str1]         ;    assert(0 < 10, *"0 < 10 failed") (examples/tests/unsigned_cmp_test.brandejs:8)
        push ax
        mov  ax, 10
        push ax
        mov  ax, 0
        pop  bx
        cmp  ax, bx
        pushf
        pop  ax
        mov  cl, 7
        shr  ax, cl
        and  ax, 1
        push ax
        call assert

        lea  ax, [_str2]         ;    assert(0xefff < 0xfffe, *"0xefff < 0xfffe failed") (examples/tests/unsigned_cmp_test.brandejs:9)
        push ax
        mov  ax, 65534
        push ax
        mov  ax, 61439
        pop  bx
        cmp  ax, bx
        pushf
        pop  ax
        mov  cl, 7
        shr  ax, cl
        and  ax, 1
        push ax
        call assert

        lea  ax, [_str3]         ;    assert(not (5 < 1), *"not(5 < 1) failed") (examples/tests/unsigned_cmp_test.brandejs:10)
        push ax
        mov  ax, 1
        push ax
        mov  ax, 5
        pop  bx
        cmp  ax, bx
        pushf
        pop  ax
        mov  cl, 7
        shr  ax, cl
        and  ax, 1
        xor  ax, 1
        push ax
        call assert

        lea  ax, [_str4]         ;    assert(not (10 < 10), *"not(10 < 10) failed") (examples/tests/unsigned_cmp_test.brandejs:11)
        push ax
        mov  ax, 10
        push ax
        mov  ax, 10
        pop  bx
        cmp  ax, bx
        pushf
        pop  ax
        mov  cl, 7
        shr  ax, cl
        and  ax, 1
        xor  ax, 1
        push ax
        call assert

        lea  ax, [_str5]         ;    println(*"unsigned_lt_test success!") (examples/tests/unsigned_cmp_test.brandejs:12)
        push ax
        call println

rtn5    mov  sp, bp
        pop  bp
        ret  0
over5   nop

        jmp  over6
unsigned_gt_test:
        push bp                  ;def unsigned_gt_test() -> void { (examples/tests/unsigned_cmp_test.brandejs:15)
        mov  bp, sp
        sub  sp, 0
        lea  ax, [_str6]         ;    println(*"skipping unsigned_gt_test!!!!!!") (examples/tests/unsigned_cmp_test.brandejs:16)
        push ax
        call println

rtn6    mov  sp, bp
        pop  bp
        ret  0
over6   nop

        jmp  over7
unsigned_gte_test:
        push bp                  ;def unsigned_gte_test() -> void { (examples/tests/unsigned_cmp_test.brandejs:24)
        mov  bp, sp
        sub  sp, 0
        lea  ax, [_str7]         ;    println(*"skipping unsigned_gte_test!!!!!!") (examples/tests/unsigned_cmp_test.brandejs:25)
        push ax
        call println

rtn7    mov  sp, bp
        pop  bp
        ret  0
over7   nop

        jmp  over8
unsigned_lte_test:
        push bp                  ;def unsigned_lte_test() -> void { (examples/tests/unsigned_cmp_test.brandejs:35)
        mov  bp, sp
        sub  sp, 0
        lea  ax, [_str8]         ;    println(*"skipping unsigned_lte_test!!!!!!") (examples/tests/unsigned_cmp_test.brandejs:36)
        push ax
        call println

rtn8    mov  sp, bp
        pop  bp
        ret  0
over8   nop

        jmp  over9
main:
        push bp                  ;def main() -> void { (examples/tests/unsigned_cmp_test.brandejs:46)
        mov  bp, sp
        sub  sp, 0
        call unsigned_lt_test    ;    unsigned_lt_test() (examples/tests/unsigned_cmp_test.brandejs:47)

        call unsigned_gt_test    ;    unsigned_gt_test() (examples/tests/unsigned_cmp_test.brandejs:48)

        call unsigned_gte_test   ;    unsigned_gte_test() (examples/tests/unsigned_cmp_test.brandejs:49)

        call unsigned_lte_test   ;    unsigned_lte_test() (examples/tests/unsigned_cmp_test.brandejs:50)

        lea  ax, [_str9]         ;    println(*"COMPLETE unsigned comparison test success!") (examples/tests/unsigned_cmp_test.brandejs:51)
        push ax
        call println

rtn9    mov  sp, bp
        pop  bp
        ret  0
over9   nop

segment heap
stack   resw 1024
dno     db   ?

_str    db   "Error occured:", 0
_str1   db   "0 < 10 failed", 0
_str2   db   "0xefff < 0xfffe failed", 0
_str3   db   "not(5 < 1) failed", 0
_str4   db   "not(10 < 10) failed", 0
_str5   db   "unsigned_lt_test success!", 0
_str6   db   "skipping unsigned_gt_test!!!!!!", 0
_str7   db   "skipping unsigned_gte_test!!!!!!", 0
_str8   db   "skipping unsigned_lte_test!!!!!!", 0
_str9   db   "COMPLETE unsigned comparison test success!", 0