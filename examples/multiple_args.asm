; << Generated by NadLabem >>
; the open source brandejs-to-assembly compiler

cpu 8086
segment code
..start mov  bx, heap
        mov  ds, bx
        mov  es, bx
        mov  bx, stack
        mov  ss, bx
        mov  sp, dno
        mov  bp, sp

        jmp  over
put_char:
        push bp                  ;def put_char(character: char) -> void { (examples/../std/stdio.brandejs:1)
        mov  bp, sp
        sub  sp, 0
        mov ah, 2                ;    $ mov ah, 2     ; Identifikace služby Vypsat jeden bajt na terminál (examples/../std/stdio.brandejs:2)

        mov dl, byte[bp + 4]     ;    $ mov dl, byte[{character}]     ; Bajt, který se má na terminál vypsat (examples/../std/stdio.brandejs:3)

        int 0x21                 ;    $ int 0x21      ; resp. int 33 poskytne službu (examples/../std/stdio.brandejs:4)

rtn     mov  sp, bp
        pop  bp
        ret  2
over    nop

        jmp  over1
get_char:
        push bp                  ;def get_char() -> char { (examples/../std/stdio.brandejs:7)
        mov  bp, sp
        sub  sp, 0
        mov ah, 1                ;    $ mov ah, 1     ; Identifikace služby Načíst jeden bajt z terminálu (examples/../std/stdio.brandejs:8)

        int 0x21                 ;    $ int 0x21      ; resp. int 33 poskytne službu (examples/../std/stdio.brandejs:9)

        mov  al, al              ;    return $al (examples/../std/stdio.brandejs:10)
        mov  ah, 0
        jmp  rtn1

rtn1    mov  sp, bp
        pop  bp
        ret  0
over1   nop

        jmp  over2
print:
        push bp                  ;def print(string: @char[]) -> void { (examples/../std/stdio.brandejs:17)
        mov  bp, sp
        sub  sp, 3
        mov  ax, 0               ;    i: int = 0 (examples/../std/stdio.brandejs:18)
        mov  word[bp - 2], ax

        mov  ax, 0               ;    byte: char = string[0] (examples/../std/stdio.brandejs:19)
        mov  si, ax
        mov  bx, word[bp + 4]
        mov  ax, 0
        mov  al, byte[bx + si]
        mov  byte[bp - 3], al

while   nop                      ;    while(byte != 0c){ (examples/../std/stdio.brandejs:20)
        mov  ax, 0
        push ax
        mov  ax, 0
        mov  al, byte[bp - 3]
        pop  bx
        cmp  ax, bx
        pushf
        pop  ax
        mov  cl, 6
        shr  ax, cl
        and  ax, 1
        xor  ax, 1
        jz   wout
        mov  ax, 0               ;        put_char(byte) (examples/../std/stdio.brandejs:21)
        mov  al, byte[bp - 3]
        push ax
        call put_char

        mov  ax, 1               ;        i = i + 1 (examples/../std/stdio.brandejs:22)
        push ax
        mov  ax, word[bp - 2]
        pop  bx
        add  ax, bx
        mov  word[bp - 2], ax

        mov  ax, word[bp - 2]    ;        byte = string[i] (examples/../std/stdio.brandejs:23)
        mov  si, ax
        mov  bx, word[bp + 4]
        mov  ax, 0
        mov  al, byte[bx + si]
        mov  byte[bp - 3], al

        jmp  while
wout    nop

rtn2    mov  sp, bp
        pop  bp
        ret  2
over2   nop

        jmp  over3
print_dos:
        push bp                  ;def print_dos(string: char[]*) -> void { (examples/../std/stdio.brandejs:27)
        mov  bp, sp
        sub  sp, 0
        mov ah, 9                ;    $ mov ah, 9	                ; Identifikace služby Vypsat řetězec bajtů na terminál (examples/../std/stdio.brandejs:28)

        mov dx, word[bp + 4]     ;    $ mov dx, word[{string}]    ; Offset začátku řetězce v segmentu dle DS (examples/../std/stdio.brandejs:29)

        int 0x21                 ;    $ int 0x21                  ; resp. int 33 poskytne službu (examples/../std/stdio.brandejs:30)

rtn3    mov  sp, bp
        pop  bp
        ret  2
over3   nop

        jmp  over4
println:
        push bp                  ;def println(string: @char[]) -> void { (examples/../std/stdio.brandejs:33)
        mov  bp, sp
        sub  sp, 0
        mov  ax, word[bp + 4]    ;    print(*string) (examples/../std/stdio.brandejs:34)
        push ax
        call print

        mov  ax, 10              ;    put_char(10c)   ; 13 - CL (examples/../std/stdio.brandejs:35)
        push ax
        call put_char

        mov  ax, 13              ;    put_char(13c)   ; 10 - RF (examples/../std/stdio.brandejs:36)
        push ax
        call put_char

rtn4    mov  sp, bp
        pop  bp
        ret  2
over4   nop

        lea  ax, [_str]          ;fn(*"AAAAA", *"BBBBBB") (examples/multiple_args.brandejs:10)
        push ax
        lea  ax, [_str1]
        push ax
        call fn
exit:
ok      hlt
error   hlt

        jmp  over5
fn:
        push bp                  ;def fn(a: @char[], b: @char[]) -> void{ (examples/multiple_args.brandejs:3)
        mov  bp, sp
        sub  sp, 0
        lea  ax, [_str2]         ;    print(*"a:") (examples/multiple_args.brandejs:4)
        push ax
        call print

        mov  ax, word[bp + 4]    ;    println(*a) (examples/multiple_args.brandejs:5)
        push ax
        call println

        lea  ax, [_str3]         ;    print(*"b:") (examples/multiple_args.brandejs:6)
        push ax
        call print

        mov  ax, word[bp + 6]    ;    println(*b) (examples/multiple_args.brandejs:7)
        push ax
        call println

rtn5    mov  sp, bp
        pop  bp
        ret  4
over5   nop

segment heap
stack   resw 1024
dno     db   ?

_str    db   "BBBBBB", 0
_str1   db   "AAAAA", 0
_str2   db   "a:", 0
_str3   db   "b:", 0