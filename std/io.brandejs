def put_char(character: char) -> void {
    $ mov ah, 2     ; Identifikace služby Vypsat jeden bajt na terminál
    $ mov dl, byte[{character}]     ; Bajt, který se má na terminál vypsat
    $ int 0x21      ; resp. int 33 poskytne službu
}

def get_char() -> char {
    $ mov ah, 1     ; Identifikace služby Načíst jeden bajt z terminálu
    $ int 0x21      ; resp. int 33 poskytne službu
    return $al
    ; Služba vrací v registru AL načtený bajt. Pokud byl čtením vstup vyčerpán (už nejsou zadané žádné bajty k načtení),
    ; služba nastaví ZF=1 a AL=0. Pokud je předáván bajt v AL, je ZF=0.
    ; podporuje i čtení UNICODE znaků v transformaci UTF-8. Pokud je zadán vícebajtový znak,služba předá jen jeden jeho bajt (více se do AL nevejde).
    ; Dalším int 21h bude předán další bajt téhož znaku. Nedojde ke ztrátě obsahu.
}

; Nejprve musíte v paměti rezervovat "buffer", do kterého bude služba načtené bajty vkládat. V datovém segmentu vytvořte něco jako:

; nacteno	db 80, ?
; 	resb 80
; Buffer nechť obsahuje tři složky: první bajt je vámi zadaná délka bufferu, 
; který dáváte službě k dispozici. V bajtu zadáváte číslo bez znaménka. 
; Číslo odpovídá počtu bajtů, který může služba maximálně načíst. 
; Služba načte jeden celý řádek až do maximální zadané délky.

INPUT_BUFFER: char[103] = [100c]
; 1st byte for buffer length
; 2nd byte for laoded length
; 100  bytes for content
; 103rd byte for null byte if needed
INPUT: @char[101] =@= (*INPUT_BUFFER::int + 2) :: char[]*

def get_line() -> char[101]* {
    $ mov ah, 0x0a	            ; Identifikace služby Načíst řádek z terminálu
    $ lea dx, [{INPUT_BUFFER}]	; Offset začátku bufferu v segmentu dle DS
    $ int 0x21		            ; resp. int 33 poskytne službu
    length: char = INPUT_BUFFER[1]
    INPUT[length] = 0c
    return *INPUT
}
; ;usage
; a: char[]* = get_line()
; ;then use/copy the string somewhere


def input_done() -> bool {
    $ mov ah, 0x0b	; Identifikace služby Zjisti stav čtení z terminálu
    $ int 0x21         ; resp. int 33 poskytne službu
    ; Služba vrací AL=0xff, pokud je k dispozici alespoň jeden nepřečtený bajt.
    ; Jinak vrací služba AL=0, tzn. že vstup už byl čtením vyčerpán.
    return $al == 0c
}


def print_hex(number: int) -> void {

    for (i: int = 0, i < 4, ++i) {
        number = number <<< 4
        last: int = number & 0xf ; isolate last hex digit

        if (last < 10)
            last = last + 0x30   ; decimal digit
        else
            last = last + 0x37   ; letter digit

        put_char(last :: char)
    }
}

def print(str: @char[]) -> void {
    i: int = 0
    character: char = str[0]
    while(character != 0c){
        put_char(character)
        ++i
        character = str[i]
    }
}

def print_dos(str: char[]*) -> void {
    $ mov ah, 9	        ; Identifikace služby Vypsat řetězec bajtů na terminál
    $ lea dx, [{str}]   ; Offset začátku řetězce v segmentu dle DS
    $ int 0x21          ; resp. int 33 poskytne službu
}

def println(str: @char[]) -> void {
    print(*str)
    put_char(13c)   ; 13 - CR
    put_char(10c)   ; 10 - LF
}

def printf(string: @char[], number: int) -> void {
    i: int = 0
    character: char = string[i]

    while(character != 0c) {

        if (character == '%') {
            symbol: char = string[i + 1]

            if (symbol == 'd') {
                print_decimal(number)
            }
            else if (symbol == 'h') {
                print_hex(number)
            }
            else print(*"[printf: Invalid format]")
            i = i + 2
            character = string[i]
            continue
        }
        else put_char(character)

        ++i
        character = string[i]
    }
}

module print_decimal {
    DIGITS: char[6] = []
}
def print_decimal(number: int) -> void {
    index: int = 0

    do {
        last_digit: int = number % 10
        print_decimal.DIGITS[index] = last_digit :: char + '0'
        number = number / 10
        ++index
    } while (number > 0)

    ; Print digits in reverse order
    while (index > 0) {
        --index
        put_char(print_decimal.DIGITS[index])
    }
}

def print_bool(boolean: bool) -> void {
    if (boolean)
        print(*"true")
    else
        print(*"false")
}

module print_int {
    RESULT: char[32] = []
    DIGITS: char[] = "0123456789abcdefghijklmnopqrstuvwxyz"
}
def print_int(number: int, base: int, length: int, sign: bool) -> void {
    index: int = 0

    if (sign and number <+ 0){
        put_char('-')
        number = -number
    }

    do {
        last_digit: int = number % base
        print_int.RESULT[index] = print_int.DIGITS[last_digit]
        number = number / base
        ++index
    } while (number > 0 or index < length)

    ; Print digits in reverse order
    while (index > 0) {
        --index
        put_char(print_int.RESULT[index])
    }
}


; module read_int {
;     DIGITS: char[128] = []
;     for(i: int = 0, i < 36, ++i){
;         DIGITS[print_int.DIGITS[i]] = i
;     }
; }
; def read_int(str: @char[], base: int) -> int {
;     number: int = 0
;     i: int = 0
;     character: char = str[i]

;     while (character != 0c) {
;         number = number * base + read_int.DIGITS[character]
;         ++i
;         character = str[i]
;     }

;     return number
; }
